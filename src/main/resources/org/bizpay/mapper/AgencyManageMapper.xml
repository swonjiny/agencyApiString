<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="org.bizpay.mapper.AgencyManageMapper">
  	<!-- 대리점목록 -->
  	<select id="agencyList" resultType="AgencyManage" >
				select a.bizrno, a.cmpnm, a.trmnl_no, a.pg_trmnl_no, a.pg_van, a.pay_bprprr, a.pay_telno, a.pay_cmpnm, a.pay_bizrno, a.pay_bplc
						, a.m_telno, a.email, a.bank_name, a.bank_serial, a.create_dt, a.bank_user, a.dealer_rate, a.member_input_yn, a.member_rate, a.memo, a.history_memo
				        , a.join_amt, a.limit_one, a.limit_day, a.limit_month, a.limit_year, a.installment_months
				        , a.biz_limit_one, a.biz_limit_day, a.biz_limit_month, a.biz_limit_year, a.biz_installment_months
				        , a.pg_gb, a.van_gb, a.biz_type
							, b.usid, b.mber_code, b.biz_code, a.bprprr, a.bplc, a.biz_telno, a.pymnt_rate, a.dealer_id, a.dt, a.trget_biz_code, a.recommend_biz_code, a.baro_rate, a.etc_rate, a.dealer_kind, 
				(SELECT code_nm FROM code WHERE group_nm = '대리점구분' AND sn = nvl(a.dealer_kind, (SELECT MAX(sn) FROM code WHERE group_nm = '대리점구분'))) as gubun,
				(SELECT cmpnm FROM biz WHERE biz_code = a.trget_biz_code) as target,
				(SELECT cmpnm FROM biz WHERE biz_code = a.recommend_biz_code) as recommend, 	
				GET_AGENCY(a.trget_biz_code, a.dealer_kind) as agent,
				GET_DISTRIBUTOR(a.trget_biz_code, a.dealer_kind) as distributor,
				(SELECT COUNT(*) FROM mber WHERE biz_code=b.biz_code AND author_code NOT IN('AUTHOR_MNGR','AUTHOR_DEALER')) AS mber_cnt, 
				Nvl((SELECT hist_cn FROM mber_hist2 WHERE mber_code=b.mber_code AND sn=(SELECT MAX(sn) FROM mber_hist2 WHERE mber_code=b.mber_code AND hist_code='MH_USE_AT')) , 'N') as use_at, 
				(SELECT creat_dt FROM mber_hist2 WHERE mber_code=b.mber_code AND sn=(SELECT MAX(sn) FROM mber_hist2 WHERE mber_code=b.mber_code AND hist_code='MH_USE_AT')) as creat_dt 
				FROM biz a, mber b
				WHERE a.biz_code=b.biz_code
		  		<if test="cmpnm!=null and !cmpnm.equals('')"> 
                	AND A.cmpnm like '%'||#{cmpnm}||'%'
                </if>
                <if test="dealerId!=null and !dealerId.equals('')"> 
                	AND A.dealer_id like '%'||#{dealerId}||'%'
                </if>
                <if test="useAt!=null and !useAt.equals('')"> 
                	AND b.use_at= #{useAt}
                </if>
				<if test="bizNum!=null and !bizNum.equals('')"> <!-- 암호화해서 비교해야 한다. -->
                	AND b.bizrno  like '%'||#{bizNum}||'%'
                </if>
		
				AND b.author_code in('AUTHOR_MNGR','AUTHOR_DEALER') 
				AND a.biz_code in (SELECT biz_code FROM biz START WITH biz_code = #{memberBizeCode} CONNECT BY NOCYCLE PRIOR biz_code = trget_biz_code) 
				ORDER BY b.biz_code DESC 
		

  	</select>
  	
  	<update id="updateBiz">
  	UPDATE BIZ
		SET 
			<if test='bizrno!=null and !bizrno.equals( "") '> 
		    BIZRNO                 = #{bizrno}, <!-- 필수 :  암호화후저장  --> 
			</if>
		    CMPNM                  = #{cmpnm}, 
		    <if test="bprprr!=null">
		    BPRPRR                 =  #{bprprr}, 
		    </if>
		    <if test="bplc!=null">
		    BPLC                   = #{bplc} , 
		    </if>
		    <if test="bizTelno!=null">
		    BIZ_TELNO              = #{bizTelno}, 
		    </if>
		    
		    <!--  HEADOFFICE -->
		    TRMNL_NO            = #{trmnlNo}, 
		    PG_TRMNL_NO       = #{pgTrmnlNo}, 
		    PG_VAN                = #{pgVan},
		    PG_GB                  = #{pgGb}, 
		    VAN_GB                = #{vanGb},
		    BIZ_TYPE               = #{bizType}, 
		    <!--end !HEADOFFICE -->
		   
		    DEALER_KIND            = #{dealerKind}, 		    
   			TRGET_BIZ_CODE        = #{trgetBizCode}, 
	  		RECOMMEND_BIZ_CODE     = #{recommendBizCode},
	  		PAY_BPRPRR             = #{payBprprr}, 
	  		PAY_TELNO              = #{payTelno}, 
	  		PAY_CMPNM              = #{payCmpnm}, 
	  		PAY_BIZRNO             = #{payBizrno}, 
	  		PAY_BPLC               = #{payBplc},
	  		M_TELNO                = #{mTelno}, 
	  		EMAIL                  = #{email},
	  		BANK_NAME              = #{bankName},
	  		BANK_SERIAL            = #{bankSerial},
	  		BANK_USER              = #{bankUser}, 
	  		DEALER_RATE            = #{dealerRate}, 
	  		MEMBER_INPUT_YN        = #{memberInputYn}, 
	  		MEMBER_RATE            = #{memberRate},
	  		MEMO                   = #{memo}, 
		    HISTORY_MEMO           = #{historyMemo}, 
	  		LIMIT_ONE              = #{limitOne}, 
		    LIMIT_DAY              = #{limitDay}, 
		    LIMIT_MONTH            = #{limitMonth}, 
		    LIMIT_YEAR             = #{limitYear}, 
		    INSTALLMENT_MONTHS     = #{installmentMonths}, 
		    BIZ_LIMIT_ONE          = #{bizLimitOne}, 
		    BIZ_LIMIT_DAY          = #{bizLimitDay}, 
		    BIZ_LIMIT_MONTH        = #{bizLimitMonth}, 
		    BIZ_LIMIT_YEAR         = #{bizLimitYear}, 
		    BIZ_INSTALLMENT_MONTHS = #{bizInstallmentMonths},
		    JOIN_AMT               = #{joinAmt}, 		   
		    DT                     = SYSDATE
		WHERE BIZ_CODE     = #{bizCode}	
		
  	</update>
  	<!--  존재하는 대리점인지 확인 -->
  	<select id="bizCount" resultType="int">
  	SELECT count(1) FROM biz WHERE biz_code= #{val}
  	</select>
  	
	<!-- 하위대리점에 속하는 대리점인지 확인 -->
	<select id="agencyConfirm1" resultType="int">
		SELECT nvl(min(dealer_kind), 0) as minDealerKind
		FROM ( SELECT biz_code, nvl(dealer_kind, (SELECT max(sn) FROM code WHERE group_nm = '대리점구분')) as dealer_kind FROM biz START WITH biz_code =  #{val} CONNECT BY NOCYCLE PRIOR biz_code = trget_biz_code ) a 
		WHERE a.biz_code != #{val}
	</select>
	
	<!-- trget_biz_code -->
	<select id="agencyConfirm2" resultType="int">
		SELECT dealer_kind FROM biz WHERE biz_code = #{val} 
	</select>
	<!-- agent member_biz_code -->
	<select id="agencyConfirm3" resultType="int">
		SELECT dealer_kind FROM biz WHERE biz_code = ( SELECT trget_biz_code FROM biz WHERE biz_code = #{val} )
	</select>
	
	<insert id="insertBizHist">
	insert into
    BIZ_HIST (
        BIZ_CODE,
        SN,
        BIZRNO,
        CMPNM,
        <if test="bprprr!=null">  
        BPRPRR,
        </if>
        <if test="bplc!=null">
        BPLC,
        </if>
        <if test="bizTelno!=null">
        BIZ_TELNO,
        </if>
        TRMNL_NO,
        PG_TRMNL_NO,
        PG_VAN,
        CREAT_MBER_CODE,
        DEALER_KIND,
        PAY_BPRPRR,
        PAY_TELNO,
        PAY_CMPNM,
        PAY_BIZRNO,
        PAY_BPLC,
        M_TELNO,
        EMAIL,
        BANK_NAME,
        BANK_SERIAL,
        BANK_USER,
        DEALER_RATE,
        MEMBER_INPUT_YN,
        MEMBER_RATE,
        MEMO,
        HISTORY_MEMO,
        LIMIT_ONE,
        LIMIT_DAY,
        LIMIT_MONTH,
        LIMIT_YEAR,
        INSTALLMENT_MONTHS,
        BIZ_LIMIT_ONE,
        BIZ_LIMIT_DAY,
        BIZ_LIMIT_MONTH,
        BIZ_LIMIT_YEAR,
        BIZ_INSTALLMENT_MONTHS,
        PG_GB,
        VAN_GB,
        BIZ_TYPE,
        JOIN_AMT
    )
	values
    (
       #{bizCode},
       (SELECT nvl( MAX(sn)+1 , 1)  FROM biz_hist WHERE biz_code=#{bizCode}),
       #{bizrno},
       #{cmpnm},
       <if test="bprprr!=null">   
       #{bprprr},
       </if>
       <if test="bplc!=null">
       #{bplc},
       </if>
       <if test="bizTelno!=null">
       #{bizTelno},
       </if>
       #{trmnlNo},
       #{pgTrmnlNo},
       #{pgVan},
       #{creatMberCode},
       #{dealerKind},
       #{payBprprr},
       #{payTelno},
       #{payCmpnm},
       #{payBizrno},
       #{payBplc},
       #{mTelno},
       #{email},
       #{bankName},
       #{bankSerial},
       #{bankUser},
       #{dealerRate},
       #{memberInputYn},
       #{memberRate},
       #{memo},
       #{historyMemo},
       #{limitOne},
       #{limitDay},
       #{limitMonth},
       #{limitYear},
       #{installmentMonths},
       #{bizLimitOne},
       #{bizLimitDay},
       #{bizLimitMonth},
       #{bizLimitYear},
       #{bizInstallmentMonths},
       #{pgGb},
       #{vanGb},
       #{bizType},
       #{joinAmt}
    )
	
	</insert>
	
	<insert id="insertBiz">
		INSERT INTO biz (
			biz_code,
			bizrno,
			cmpnm,
			bprprr,
			bplc,
			biz_telno,
			trmnl_no,
			pymnt_rate,
			dealer_id,
			trget_biz_code,-- 널인경우 뺀다
			recommend_biz_code,

			dealer_kind,
			pay_bprprr,
			pay_telno,
			pay_cmpnm,
			pay_bizrno,
			pay_bplc,
			pg_van,
			pg_trmnl_no,
			m_telno,
			email,
			bank_name,
			bank_serial,
			bank_user,
			dealer_rate,
			member_input_yn,
			member_rate,
			limit_one,
			limit_day,
			limit_month,
			limit_year,
			installment_months,
			biz_limit_one,
			biz_limit_day,
			biz_limit_month,
			biz_limit_year,
			biz_installment_months,
			pg_gb,
			van_gb,
			biz_type,
			create_dt,
			join_amt
		) VALUES (
			#{bizCode} , -- 코드추출용 로직 필요
			#{bizrno},
			#{cmpnm}, 
			#{bprprr}, -- 사업주냐 개인이냐에 따라 달라진다. 사업주 - bprprr  개인 -cmpnm
			#{bplc},
			#{bizTelno},
			#{trmnlNo},
			#{pymntRate},
			GET_DEALER_ID(),
			#{trgetBizCode},
			#{recommendBizCode},

			#{dealerKind},
			#{payBprprr},
			#{payTelno},
			#{payCmpnm},
			#{payBizrno},
			#{payBplc},
			#{pgVan},
			#{pgTrmnlNo},
			#{mTelno},
			#{email},
			#{bankName},
			#{bankSerial},
			#{bankUser},
			#{dealerRate},
			#{memberInputYn},
			#{memberRate},
			#{limitOne},
			#{limitDay},
			#{limitMonth},
			#{limitYear},
			#{installmentMonths},
			#{bizLimitOne},
			#{bizLimitDay},
			#{bizLimitMonth},
			#{bizLimitYear},
			#{bizInstallmentMonths},
			#{pgGb},
			#{vanGb},
			#{bizType},
			to_char(sysdate , 'YYYY-MM-DD' ),
			#{joinAmt}
			)
		
	</insert>
	
	<select id="selectBizCode" resultType="int">
		SELECT NVL(MAX(biz_code)+1,1)  FROM biz
	</select>
	
	<select id="selectBizCount" resultType="int">
		SELECT count(1) FROM biz WHERE bizrno = #{val}
	</select>
	
	<!-- 판매자 목록 -->
	<select id="selectSellerList" resultType="SellerList" >
	select * from
	(select
	    b.induty_id,
	    b.memo,
	    b.history_memo,
	    b.adres,
	    b.mbtlnum,
	    b.mber_code,
	    a.biz_code,
	    a.recommend_biz_code as b_recommend_biz_code,
	    nvl(b.calculate_type , 'U' ) as calculate_type,
	    a.cmpnm,
	    b.fee_rate,
	    b.creat_dt,
	    nvl(b.reg_case ,'대리점' ) as reg_case,
	    b.mber_mobile,
	    b.mber_phone,
	    b.mber_name,
	    b.mber_jumi,
	    b.bank_name,
	    bank_code,
	    b.account_no,
	    b.email,
	    b.depositor,
	    b.atm_stop,
	    b.pay_type,
	    case pay_type when 'N' then '일반' else (case pay_type when 'B' then '바로정산' else '익일입금' end) end as kpay_type,
	    b.code_rate,
	    b.one_limit_rate,
	    b.recommend_biz_code,
	    b.document_reg,
	    b.lv1_rate,
	    b.lv2_rate,
	    b.lv3_rate,
	    b.fee_distributor,
	    b.fee_agency,
	    b.fee_dealer,
	    b.fee_bank,
	    (select hist_cn from mber_hist2 where mber_code = b.mber_code and sn = (select max(sn) from mber_hist2 where mber_code = b.mber_code and hist_code = 'MH_USE_AT')) as use_at,
	    (select creat_dt from mber_hist2 where mber_code = b.mber_code and sn = ( select max(sn) from mber_hist2 where mber_code = b.mber_code and hist_code = 'MH_USE_AT')) as creat_dt_can,
	    b.limit_one,
	    b.limit_day,
	    b.limit_month,
	    b.limit_year,
	    b.trmnl_no,
	    b.pg_trmnl_no,
	    b.pg_sugi_trmnl_no,
	    nvl(b.pg_van , 'VAN' ) as pg_van,
	    b.pg_gb,
	    b.van_gb,
	    nvl(b.set_device , '') as set_device,
	    nvl(b.sugi , 'N' ) as sugi,
	    nvl(b.sugi_certification , 'N' ) as sugi_certification,
	    nvl(b.sms_autosend ,'N') as sms_autosend,
	    nvl(b.set_sms_auth,'N') as set_sms_auth,
	    b.sms_auth_money,
	    b.biz_type_name,
	    b.biz_item,
	    nvl(b.cash_trmnl_no , '') as cash_trmnl_no,
	    b.installment_months,
	    b.biz_type,
	    b.company_name,
	    b.biz_num,
	    (select balance from tbl_atm 
		    where mber_code = b.mber_code and req_result = 'OK' and inout_no = (
	                select max(inout_no)from tbl_atm where mber_code = b.mber_code and req_result = 'OK'
	            )
	    ) as balance,
	    (select dealer_id from biz where biz_code = b.biz_code) as dealer_id,
	    (select dealer_kind from biz where biz_code = b.biz_code) as dealer_kind,
	    (select dealer_rate from biz where biz_code = b.biz_code) as dealer_rate
	from
	    biz a,
	    mber_basis b
	where
	    a.biz_code = b.biz_code
	    and a.biz_code in (
	        select biz_code from biz
	        start with biz_code = '0000002'
	        connect by nocycle
	            prior biz_code = trget_biz_code
	    )
	    and b.mber_name is not null
	    <if test="bizCode!=null and !bizCode.equals('')">
			AND  a.biz_code=#{bizCode}
        </if>
        <if test="calculateType!=null and !calculateType.equals('')">
			AND b.calculate_type=#{calculateType}
        </if>
        <if test="indutyId!=null and !indutyId.equals('')">
			AND b.induty_id LIKE #{indutyId}
        </if>
        <if test="memberName!=null and !memberName.equals('')">
			AND b.mber_name LIKE '%'||#{memberName}||'%'
			
        </if>
        <if test="bizNum!=null and !bizNum.equals('')">
			AND b.biz_num like  '%'||#{bizNum}||'%'
        </if>
        <if test="depositor!=null and !depositor.equals('')">
			AND b.depositor LIKE '%'||#{depositor}||'%'
        </if>
        <if test="bizTypeName!=null and !bizTypeName.equals('')">
			AND b.biz_type_name LIKE '%'||#{bizTypeName}||'%'
        </if>
        <if test="bizItem!=null and !bizItem.equals('')">
			AND b.biz_item LIKE '%'||#{bizItem}||'%'
        </if>
 
        <if test="dateStart!=null and !dateStart.equals('')">
			AND TO_CHAR(b.creat_dt,'yyyymmdd') >= #{dateStart}
        </if>
        <if test="dateEnd!=null and !dateEnd.equals('')">
			AND TO_CHAR(b.creat_dt,'yyyymmdd') &lt;= #{dateEnd}
        </if>
        <if test="nm!=null and !nm.equals('')">
			AND b.company_name LIKE '%'||#{nm}||'%'
        </if>
        
        	<if test='useAt.equals("S")'>
			AND b.reg_case is null        	  
        	</if>
        	<if test='useAt.equals("T")'>
			AND b.reg_case  = 'APP'     	  
        	</if>
        	<if test='useAt.equals("U")'>
			AND b.document_reg = 'O'  	  
        	</if>
        	<if test='useAt.equals("V")'>
			AND b.document_reg != 'O' 
        	</if>
      
	    ORDER BY b.creat_dt DESC )
	    where 1=1 
		<choose>
			<when test='useAt!=null and  useAt.equals("Y") '>
				AND use_at='Y' OR use_at is null
			</when>
			<when test='useAt!=null and  useAt.equals("N") '>
				AND use_at='N' 
			</when>
			
		</choose>

	</select>
	<!-- 대리점구분  -->
	<select id="agencySettingList" resultType="HashMap" parameterType="HashMap">
		SELECT 
			sn, 
			code, 
			code_nm 
		FROM code 
		WHERE 
			group_nm = '대리점구분'
		<choose>
			<when test='!memberBizCode.equals(agencyCode) '>
				AND sn &gt;= #{dealerKind} 
			</when>
			<otherwise>
	  			AND sn &gt; #{dealerKind}
	        </otherwise>
		</choose>
	</select>
	<!-- 기준대리점 -->
	<select id="agencySettingList2" resultType="HashMap" parameterType="HashMap">
		<choose>
			<when test='!memberBizCode.equals(agencyCode) '>
			SELECT * 
				FROM (  SELECT a.biz_code, a.cmpnm, a.dealer_id, nvl(a.dealer_kind, (SELECT max(sn) FROM code WHERE group_nm = '대리점구분')) as dealer_kind  
				        FROM (SELECT biz_code, cmpnm, dealer_id, dealer_kind FROM biz START WITH biz_code = #{memberBizCode} CONNECT BY NOCYCLE PRIOR biz_code = trget_biz_code ) a  	
				      ) b 
				WHERE b.dealer_kind &lt; (SELECT nvl(dealer_kind, (SELECT max(sn) FROM code WHERE group_nm = '대리점구분')) as dealer_kind FROM biz 
						WHERE biz_code =#{agencyCode}) 
				ORDER BY cmpnm
			</when>
			<otherwise>
	  			SELECT biz_code, cmpnm, dealer_id, nvl(dealer_kind, '0') as dealer_kind 
			FROM biz 
			WHERE biz_code = (SELECT nvl(b.trget_biz_code, (SELECT biz_code FROM biz WHERE biz_code = #{memberBizCode} )) as trget_biz_code FROM
					 (SELECT trget_biz_code FROM biz WHERE biz_code = #{memberBizCode} ) b) ORDER BY cmpnm
	        </otherwise>
		</choose>
	</select>
	
	<insert id="insertSellerList" parameterType="java.util.List">
	<foreach collection="list" item="item"  index="index" separator=" "  open="INSERT ALL" close="SELECT * FROM DUAL">
		INTO mber_basis (
		    induty_id,
		    adres,
		    mbtlnum,
		    biz_code,

		    creat_dt,
		    fee_rate,
		    mber_name,
		    bank_name,
		    account_no,
		    mber_mobile,
		    mber_jumi,
		    email,
		    depositor,
		    pay_type,
		    fee_distributor,
		    fee_agency,
		    fee_dealer,
		    fee_bank,
		    limit_one,
		    limit_day,
		    limit_month,
		    limit_year,
		    installment_months,
		    biz_type,
		    company_name,
		    biz_num,
		    trmnl_no,
		    pg_van,
		    pg_trmnl_no,
		    mber_phone,
		    sugi,
		    cash_trmnl_no,
		    set_device,
		    sms_autosend,
		    pg_gb,
		    van_gb,
		    set_sms_auth,
		    sms_auth_money,
		    biz_type_name,
		    biz_item,
		    pg_sugi_trmnl_no,
		    memo,
		    history_memo,
		    bank_code,
		    atm_stop,
		    recommend_biz_code,
		    unicore_rate,
		    recommend_dealer_rate,
		    code_rate,
		    one_limit_rate,
		    lv1_rate,
		    lv2_rate,
		    lv3_rate,
		    document_reg,
		    set_device2
		) VALUES 

		(
			#{item.indutyId},
			#{item.adres},
			#{item.mbtlnum},
			#{item.memberBizeCode},

			sysdate,
			#{item.feeRate},
			#{item.mberName},
			#{item.bankName},
			#{item.accountNo},
			#{item.mberMobile},
			#{item.mberJumi},
			#{item.email},
			#{item.depositor},
			#{item.payType},
			#{item.feeDistributor},
			#{item.feeAgency},
			#{item.feeDealer},
			#{item.feeBank},
			#{item.limitOne},
			#{item.limitDay},
			#{item.limitMonth},
			#{item.limitYear},
			#{item.installmentMonths},
			#{item.bizType},
			#{item.companyName},
			#{item.bizNum},
			#{item.trmnlNo},
			#{item.pgVan},
			#{item.pgTrmnlNo},
			#{item.mberPhone},
			#{item.sugi},
			#{item.cashTrmnlNo},
			#{item.setDevice},
			#{item.smsAutosend},
			#{item.pgGb},
			#{item.vanGb},
			#{item.setSmsAuth},
			#{item.smsAuthMoney},
			#{item.bizTypeName},
			#{item.bizItem},
			#{item.pgSugiTrmnlNo},
			#{item.memo},
			#{item.historyMemo},
			#{item.bankCode},
			1,
			#{item.recommendBizCode},
			#{item.unicoreRate},
			#{item.recommendDealerRate},
			#{item.codeRate},
			#{item.oneLimitRate},
			#{item.lv1Rate},
			#{item.lv2Rate},
			#{item.lv3Rate},
			#{item.documentReg},
			#{item.setDevice2}
		)
		</foreach>
	</insert>
	<!-- 대리점 수정1 - mber_basis  -->
	<update id="updateSelerMberBasis" >
	UPDATE mber_basis
		SET
			<if test='grade !=null and grade.equals("HEADOFFICE")'>
			 trmnl_no =  #{trmnlNo}
		    , pg_trmnl_no =  #{pgTrmnlNo}
		    , pg_sugi_trmnl_no = #{pgSugiTrmnlNo}
		    , calculate_type =  #{calculateType}
		    , pg_van =  #{pgVan}
		    , set_device = #{setDevice}
		    , set_device2 =  #{setDevice2}
		    , pg_gb = #{pgGb}
		    , van_gb = #{vanGb}
		    , sugi =  #{sugi}
		    , sugi_certification =  #{sugiCertification}
		    , sms_autosend = #{smsAutosend}
		    , set_sms_auth =  #{setSmsAuth}
		    , cash_trmnl_no =  #{cashTrmnlNo}
		    , sms_auth_money = #{smsAuthMoney} ,
			</if>
			<if test=' memberBizeCode !=null and  memberBizeCode.equals("0000002")'> 
		     limit_one =  #{limitOne}
		    , limit_day =  #{limitDay}
		    , limit_month =  #{limitMonth}
		    , limit_year =  #{limitYear}
		    , installment_months =  #{installmentMonths} ,			
			</if>
		    adres = #{adres}
		    , mbtlnum =  #{mbtlnum}
		    , biz_code =  #{bizCode}
		    , mber_code =  #{mberCode}
		    , fee_rate =  #{feeRate}
		    , mber_name = #{mberName}
		    , bank_name =  #{bankName}
		    , account_no =  #{accountNo}
		    , mber_mobile =  #{mberMobile}
		    , mber_jumi =  #{mberJumi}
		    , email =  #{email}
		    , depositor =  #{depositor}
		    , pay_type =  #{payType}
		    , fee_distributor =  #{feeDistributor}
		    , fee_agency = #{feeAgency}
		    , fee_dealer =  #{feeDealer}
		    , fee_bank =  #{feeBank}

		    , biz_type = #{bizType}
		    , company_name =  #{companyName}
		    , biz_num =  #{bizNum}
		    , mber_phone =  #{mberPhone}
		    , biz_type_name =  #{bizTypeName}
		    , biz_item = #{bizItem}
		    , memo =  #{memo}
		    , history_memo =  #{historyMemo}
		    , bank_code = #{bankCode}
		    , atm_stop =  #{atmStop}
		    , recommend_biz_code =  #{recommendBizCode}
		    , unicore_rate =  #{unicoreRate}
		    , recommend_dealer_rate =  #{recommendDealerRate}
		    , code_rate = #{codeRate}
		    , one_limit_rate =  #{oneLimitRate}
		    , lv1_rate =  #{lv1Rate}
		    , lv2_rate =  #{lv2Rate}
		    , lv3_rate =  #{lv3Rate}
		    , document_reg =  #{documentReg}
		WHERE
		        induty_id =  #{indutyId}
	</update>
	
	<!-- 사용자 정보 수정  -->
	<update id="updateMber">
		UPDATE mber
			SET
			    biz_code = #{bizCode},
			    password = #{mbtlnum},
			    use_at = #{useAt}
			WHERE
			    mber_code = #{mberCode} 
	</update>
	<!-- mber_hist2  -->
	<insert id="insertMberHist2" parameterType="HashMap" >
		INSERT INTO mber_hist2 (
		    mber_code,
		    sn,
		    hist_code,
		    hist_cn,
		    creat_mber_code
		) VALUES (
		    #{mberCode},
		    (SELECT MAX(sn)+1 FROM mber_hist2 WHERE mber_code=#{mberCode} ),
		    #{histCode},
		    #{histCn},
		    #{memberMberCode}
		)
	
	</insert>
	
	<!-- 수수료율 정보 확인 테스트등 가비지 값으로  -->
	<select id="selectFeeRate" resultType="double">
		SELECT  distinct max(fee_rate) over(order by CREAT_DT desc ) FROM mber_basis WHERE mber_code= #{mberCode}  
	</select>
	
	<!-- 대리점 관리 - 대리점등록시 mber 등록 -->
	<insert id="insertMber" parameterType="AgencyMbrParam" >
		<selectKey resultType="int" keyProperty="mberCode" order="BEFORE">
			select GET_MBER_CODE() from dual
		</selectKey>
		INSERT INTO mber (
		    mber_code,
		    biz_code,
		    usid,
		    password,
		    use_at,
		    author_code
		) VALUES (
		    #{mberCode},
		    #{bizCode},
		    #{usid},
		    #{password},
		    #{useAt},
		    #{authorCode}   
		)
	</insert>
	
	<!--  대리점관리 - 대리점등록 mber_detail  -->
	<insert id="insertMberDetail" parameterType="AgencyMbrParam">
	INSERT INTO mber_detail (
	    mber_code,
	    mber_code_sn,
	    creat_dt
	) VALUES (
	    #{mberCode},
	    #{mberCodeSn},
	    sysdate
	)
	</insert>
	
		<!--대리점 관리 - mber 이력저장 -  mber_hist2  -->
	<insert id="insertMberHist" parameterType="AgencyMbrParam" >
		INSERT INTO mber_hist2 (
		    mber_code,
		    sn,
		    hist_code,
		    hist_cn,
		    creat_mber_code
		) VALUES (
		    #{mberCode},
		    #{sn},
		    #{histCode},
		    #{histCn},
		    #{creatMberCode}
		)
	</insert>
  </mapper>